{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1},{"_id":"source/img/abc.png","path":"img/abc.png","modified":1,"renderable":0},{"_id":"source/img/warma.jpg","path":"img/warma.jpg","modified":1,"renderable":0},{"_id":"source/img/Icon.jpg","path":"img/Icon.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/埃拉托斯特尼筛法.md","hash":"98d5e0b1ff0c50af9e7509327f5ec8431b0206e4","modified":1727058224669},{"_id":"source/_posts/题解-算法竞赛团队培训第一次考核.md","hash":"2f7917edb464d8e1e372a6e8168460c3bc0245c9","modified":1730030302160},{"_id":"source/img/avatar.jpg","hash":"ead98690cd137cd0bd92d35c3f5eb8ff7363c569","modified":1732867786680},{"_id":"source/img/Icon.jpg","hash":"aa073892333b4baa481c084b790a3e808f467283","modified":1732866340225},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"df15ee5204757684b0c22877d3cf4e8ba7d3686d","modified":1732871682440},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1732871682361},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"ed5cfe3ecb64bbecacd553e7c41eb5a545c4b548","modified":1732871682441},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1732871682439},{"_id":"node_modules/hexo-theme-next/README.md","hash":"20d3aab17b7d9b7ab537800a5ee932af8438664a","modified":1732871682364},{"_id":"node_modules/hexo-theme-next/package.json","hash":"e54aaf72003fd90c13b8dd538f3a0e5cdf88a34f","modified":1732871682358},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1732871682363},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1732871682359},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1732871682359},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1732871682441},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1732871682444},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1732871682441},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1732871682442},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1732871682444},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1732871682443},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1732871682445},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1732871682443},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1732871682443},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1732871682445},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1732871682444},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1732871682447},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1732871682447},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1732871682446},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"b62faaa767a45a613dd042b5f1903675eb5a8cf9","modified":1732871682447},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1732871682448},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1732871682447},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1732871682452},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1732871682449},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1732871682448},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1732871682447},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1732871682451},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1732871682370},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"8eb6a9f231ce1bfa54cc54418ccf14f01dcc9a31","modified":1732871682452},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1732871682451},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1732871682364},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"5c0f00cdac3f4727b880dd223f622a535736fa8e","modified":1732871682453},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1732871682390},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1732871682366},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1732871682392},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1732871682380},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1732871682384},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"287f57dbdfd23341800a0ff310f3474272b9dcc8","modified":1732871682363},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1732871682360},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1732871682361},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1732871682386},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"51704a2eadb0d363762ebf2e44994696e0843e40","modified":1732871682378},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1732871682393},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"0be2d7a75ffc3d9a963cf89a13bd1b50579f8304","modified":1732871682362},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1732871682389},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1732871682391},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1732871682380},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1732871682372},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1732871682385},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1732871682373},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1732871682372},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1732871682365},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1732871682395},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1732871682384},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1732871682378},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1732871682332},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1732871682390},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1732871682346},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1732871682343},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1732871682352},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1732871682338},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"25bb3ec3c7c456aa1d1650eb139605b7df7394eb","modified":1732871682348},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1732871682348},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1732871682334},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1732871682349},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1732871682347},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1732871682349},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1732871682336},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1732871682340},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1732871682327},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1732871682345},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1732871682342},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1732871682350},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1732871682338},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1732871682354},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1732871682357},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1732871682350},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1732871682326},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1732871682330},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1732871682357},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1732871682327},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1732871682326},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1732871682337},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"3864e56a829b698b98ec8d93b8916271ba6fd015","modified":1732871682346},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1732871682330},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1732871682332},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1732871682351},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1732871682348},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1732871682353},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"b2c0fd95770e58c25c9f99e1d66fe0e625e3cdab","modified":1732871682355},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1732871682395},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1732871682353},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1732871682395},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1732871682319},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1732871682396},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1732871682438},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"ebfe0954e3931431f46f913abe08d0212e06e7c2","modified":1732871682396},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"bbeae369eaba9a2565fc359a5b79184d21bdd167","modified":1732871682401},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1732871682439},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1732871682420},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1732871682425},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"93c1d103d9d16581c944c51f3d0638f57c80ee41","modified":1732871682376},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1732871682376},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1732871682392},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1732871682384},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1732871682391},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1732871682368},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1732871682377},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1732871682368},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1732871682377},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1732871682369},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1732871682387},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1732871682392},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1732871682383},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1732871682388},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1732871682382},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1732871682388},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1732871682387},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1732871682391},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1732871682388},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1732871682367},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1732871682371},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1732871682375},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1732871682375},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1732871682389},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1732871682382},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1732871682378},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1732871682370},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1732871682383},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1732871682372},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1732871682381},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1732871682385},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1732871682371},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1732871682372},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1732871682392},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1732871682374},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1732871682393},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1732871682379},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1732871682380},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1732871682380},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1732871682393},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"55c2468b2b7f035881d494085527d6554f37b556","modified":1732871682369},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1732871682373},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1732871682382},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1732871682365},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1732871682381},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1732871682332},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1732871682379},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1732871682330},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1732871682333},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1732871682328},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1732871682356},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1732871682336},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1732871682381},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1732871682333},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1732871682342},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1732871682331},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1732871682339},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1732871682347},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1732871682338},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1732871682339},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1732871682357},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1732871682383},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1732871682385},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1732871682393},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1732871682355},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1732871682335},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1732871682322},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1732871682411},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1732871682353},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1732871682423},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1732871682350},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"e814de4dab6aee6153d0a46438c231f94ed05e73","modified":1732871682406},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1732871682329},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1732871682427},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1732871682422},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1732871682329},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1732871682354},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1732871682334},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1732871682336},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1732871682333},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1732871682337},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1732871682356},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1732871682337},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1732871682340},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1732871682344},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1732871682343},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1732871682325},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1732871682335},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1732871682339},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"111f60e26b82b4d5be4357737e9273617778c9a9","modified":1732871682323},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1732871682344},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1732871682404},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1732871682411},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1732871682342},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4262628e173b16c4c6c18f817173dd103fb9e9a8","modified":1732871682343},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1732871682351},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1732871682430},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1732871682398},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1732871682346},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1732871682358},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1732871682401},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1732871682399},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1732871682416},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1732871682399},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1732871682414},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d137b54b6f5fae958e9724cdee8584745a41f07a","modified":1732871682404},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1732871682422},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1732871682417},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1732871682408},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1732871682409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1732871682426},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1732871682399},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1732871682437},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1732871682415},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1732871682425},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1732871682398},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1732871682436},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1732871682402},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1732871682418},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1732871682399},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1732871682400},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1732871682403},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1732871682418},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1732871682427},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1732871682403},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1732871682398},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1732871682412},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bc0b1b8312ec2e076c802419d603e382a1c32232","modified":1732871682402},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"549541d3a62d296427426fde8976289cb7ee2cc4","modified":1732871682400},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1732871682428},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1732871682428},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1732871682429},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1732871682429},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1732871682429},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1732871682429},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1732871682430},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1732871682420},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1732871682411},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1732871682413},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1732871682430},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1732871682410},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"be60b8dacd4dc9d2b1b68982dc4f0c5325b9a315","modified":1732871682431},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1732871682408},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1732871682438},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1732871682407},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1732871682412},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1732871682421},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1732871682430},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1732871682437},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1732871682414},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1732871682407},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1732871682411},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1732871682434},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1732871682434},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1732871682432},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1732871682413},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"0944dc38b11e89b472a17607ef049393f2a0439f","modified":1732871682415},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1732871682432},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1732871682431},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1732871682430},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1732871682433},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1732871682432},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1732871682434},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1732871682431},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1732871682436},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1732871682410},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1732871682409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1732871682411},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1732871682415},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"8213015d9cae45d2c9945f8aba9d8db39c734efc","modified":1732871682426},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1732871682419},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1732871682421},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1732871682406},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1732871682438},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1732871682418},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1732871682416},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1732871682437},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1732871682426},{"_id":"source/img/warma.jpg","hash":"72d524ee5ebca1370d3023c0ecf4b8e87cdbdd96","modified":1633169748000},{"_id":"source/img/abc.png","hash":"0e38f59b70bb4ce8723ac936f01d65418f826e7d","modified":1698408713776}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"埃拉托斯特尼筛法","date":"2024-09-23T02:14:59.000Z","_content":"\nSieve of Eratosthenes（埃拉托斯特尼筛法）是一种古老且有效的算法，用于找出一定范围内所有的质数。这个名字来源于古希腊的数学家埃拉托斯特尼，他在公元前3世纪提出了这个算法。\n埃拉托斯特尼筛法的基本思想是从最小的质数开始，逐步筛选掉其倍数，剩下的就是质数。以下是该算法的步骤：\n\n1. 创建一个列表，包含从2开始到你想找到的最大数 $ n $ 的所有整数。\n2. 选择列表中的第一个数（它是2，是唯一的偶数质数），然后将其所有的倍数（除了它自己）标记为非质数。\n3. 找到列表中的下一个未被标记的数，它是下一个质数，然后重复步骤2，将其所有的倍数标记为非质数。\n4. 继续这个过程，直到你到达列表的末尾。\n5. 在这个过程中未被标记的数就是质数。\n以下是埃拉托斯特尼筛法的伪代码示例：\n```\nfunction SieveOfEratosthenes(n)\n    create a list \"prime[0..n]\" and initialize all entries as true.\n    A value in prime[i] will finally be false if i is Not a prime, else true bool prime[n+1];\n    memset(prime, true, sizeof(prime));\n    for p = 2 to sqrt(n)\n        if prime[p] is true\n            for i = p*p to n step p\n                prime[i] = false\n    for p = 2 to n\n        if prime[p] is true\n            print p\n```\n埃拉托斯特尼筛法的时间复杂度是 $ O(n \\log \\log n) $，这使得它非常适用于寻找小于一百万或更大的范围内的所有质数。尽管这个算法在处理非常大的数字时效率不是最高的，但它因其简单性和易于实现而广受欢迎。\n\n```-\ndef sieve_of_eratosthenes(n):\n    # 初始化一个布尔数组，所有的值都设为True\n    prime = [True for _ in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        # 如果prime[p]没有被改变，那么它是一个质数\n        if prime[p] == True:\n            # 更新所有p的倍数为非质数\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # 收集所有质数\n    primes = []\n    for p in range(2, n):\n        if prime[p]:\n            primes.append(p)\n    return primes\n\n# 示例：找出小于30的所有质数\nprint(sieve_of_eratosthenes(30))\n```\n","source":"_posts/埃拉托斯特尼筛法.md","raw":"---\ntitle: 埃拉托斯特尼筛法\ndate: 2024-09-23 10:14:59\ntags:\n---\n\nSieve of Eratosthenes（埃拉托斯特尼筛法）是一种古老且有效的算法，用于找出一定范围内所有的质数。这个名字来源于古希腊的数学家埃拉托斯特尼，他在公元前3世纪提出了这个算法。\n埃拉托斯特尼筛法的基本思想是从最小的质数开始，逐步筛选掉其倍数，剩下的就是质数。以下是该算法的步骤：\n\n1. 创建一个列表，包含从2开始到你想找到的最大数 $ n $ 的所有整数。\n2. 选择列表中的第一个数（它是2，是唯一的偶数质数），然后将其所有的倍数（除了它自己）标记为非质数。\n3. 找到列表中的下一个未被标记的数，它是下一个质数，然后重复步骤2，将其所有的倍数标记为非质数。\n4. 继续这个过程，直到你到达列表的末尾。\n5. 在这个过程中未被标记的数就是质数。\n以下是埃拉托斯特尼筛法的伪代码示例：\n```\nfunction SieveOfEratosthenes(n)\n    create a list \"prime[0..n]\" and initialize all entries as true.\n    A value in prime[i] will finally be false if i is Not a prime, else true bool prime[n+1];\n    memset(prime, true, sizeof(prime));\n    for p = 2 to sqrt(n)\n        if prime[p] is true\n            for i = p*p to n step p\n                prime[i] = false\n    for p = 2 to n\n        if prime[p] is true\n            print p\n```\n埃拉托斯特尼筛法的时间复杂度是 $ O(n \\log \\log n) $，这使得它非常适用于寻找小于一百万或更大的范围内的所有质数。尽管这个算法在处理非常大的数字时效率不是最高的，但它因其简单性和易于实现而广受欢迎。\n\n```-\ndef sieve_of_eratosthenes(n):\n    # 初始化一个布尔数组，所有的值都设为True\n    prime = [True for _ in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        # 如果prime[p]没有被改变，那么它是一个质数\n        if prime[p] == True:\n            # 更新所有p的倍数为非质数\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # 收集所有质数\n    primes = []\n    for p in range(2, n):\n        if prime[p]:\n            primes.append(p)\n    return primes\n\n# 示例：找出小于30的所有质数\nprint(sieve_of_eratosthenes(30))\n```\n","slug":"埃拉托斯特尼筛法","published":1,"updated":"2024-09-23T02:23:44.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm42jql460000k8wc4mz53gao","content":"<p>Sieve of Eratosthenes（埃拉托斯特尼筛法）是一种古老且有效的算法，用于找出一定范围内所有的质数。这个名字来源于古希腊的数学家埃拉托斯特尼，他在公元前3世纪提出了这个算法。<br>埃拉托斯特尼筛法的基本思想是从最小的质数开始，逐步筛选掉其倍数，剩下的就是质数。以下是该算法的步骤：</p>\n<ol>\n<li>创建一个列表，包含从2开始到你想找到的最大数 $ n $ 的所有整数。</li>\n<li>选择列表中的第一个数（它是2，是唯一的偶数质数），然后将其所有的倍数（除了它自己）标记为非质数。</li>\n<li>找到列表中的下一个未被标记的数，它是下一个质数，然后重复步骤2，将其所有的倍数标记为非质数。</li>\n<li>继续这个过程，直到你到达列表的末尾。</li>\n<li>在这个过程中未被标记的数就是质数。<br>以下是埃拉托斯特尼筛法的伪代码示例：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SieveOfEratosthenes(n)</span><br><span class=\"line\">    create a list &quot;prime[0..n]&quot; and initialize all entries as true.</span><br><span class=\"line\">    A value in prime[i] will finally be false if i is Not a prime, else true bool prime[n+1];</span><br><span class=\"line\">    memset(prime, true, sizeof(prime));</span><br><span class=\"line\">    for p = 2 to sqrt(n)</span><br><span class=\"line\">        if prime[p] is true</span><br><span class=\"line\">            for i = p*p to n step p</span><br><span class=\"line\">                prime[i] = false</span><br><span class=\"line\">    for p = 2 to n</span><br><span class=\"line\">        if prime[p] is true</span><br><span class=\"line\">            print p</span><br></pre></td></tr></table></figure>\n埃拉托斯特尼筛法的时间复杂度是 $ O(n \\log \\log n) $，这使得它非常适用于寻找小于一百万或更大的范围内的所有质数。尽管这个算法在处理非常大的数字时效率不是最高的，但它因其简单性和易于实现而广受欢迎。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def sieve_of_eratosthenes(n):</span><br><span class=\"line\">    # 初始化一个布尔数组，所有的值都设为True</span><br><span class=\"line\">    prime = [True for _ in range(n+1)]</span><br><span class=\"line\">    p = 2</span><br><span class=\"line\">    while (p * p &lt;= n):</span><br><span class=\"line\">        # 如果prime[p]没有被改变，那么它是一个质数</span><br><span class=\"line\">        if prime[p] == True:</span><br><span class=\"line\">            # 更新所有p的倍数为非质数</span><br><span class=\"line\">            for i in range(p * p, n+1, p):</span><br><span class=\"line\">                prime[i] = False</span><br><span class=\"line\">        p += 1</span><br><span class=\"line\"></span><br><span class=\"line\">    # 收集所有质数</span><br><span class=\"line\">    primes = []</span><br><span class=\"line\">    for p in range(2, n):</span><br><span class=\"line\">        if prime[p]:</span><br><span class=\"line\">            primes.append(p)</span><br><span class=\"line\">    return primes</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例：找出小于30的所有质数</span><br><span class=\"line\">print(sieve_of_eratosthenes(30))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Sieve of Eratosthenes（埃拉托斯特尼筛法）是一种古老且有效的算法，用于找出一定范围内所有的质数。这个名字来源于古希腊的数学家埃拉托斯特尼，他在公元前3世纪提出了这个算法。<br>埃拉托斯特尼筛法的基本思想是从最小的质数开始，逐步筛选掉其倍数，剩下的就是质数。以下是该算法的步骤：</p>\n<ol>\n<li>创建一个列表，包含从2开始到你想找到的最大数 $ n $ 的所有整数。</li>\n<li>选择列表中的第一个数（它是2，是唯一的偶数质数），然后将其所有的倍数（除了它自己）标记为非质数。</li>\n<li>找到列表中的下一个未被标记的数，它是下一个质数，然后重复步骤2，将其所有的倍数标记为非质数。</li>\n<li>继续这个过程，直到你到达列表的末尾。</li>\n<li>在这个过程中未被标记的数就是质数。<br>以下是埃拉托斯特尼筛法的伪代码示例：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SieveOfEratosthenes(n)</span><br><span class=\"line\">    create a list &quot;prime[0..n]&quot; and initialize all entries as true.</span><br><span class=\"line\">    A value in prime[i] will finally be false if i is Not a prime, else true bool prime[n+1];</span><br><span class=\"line\">    memset(prime, true, sizeof(prime));</span><br><span class=\"line\">    for p = 2 to sqrt(n)</span><br><span class=\"line\">        if prime[p] is true</span><br><span class=\"line\">            for i = p*p to n step p</span><br><span class=\"line\">                prime[i] = false</span><br><span class=\"line\">    for p = 2 to n</span><br><span class=\"line\">        if prime[p] is true</span><br><span class=\"line\">            print p</span><br></pre></td></tr></table></figure>\n埃拉托斯特尼筛法的时间复杂度是 $ O(n \\log \\log n) $，这使得它非常适用于寻找小于一百万或更大的范围内的所有质数。尽管这个算法在处理非常大的数字时效率不是最高的，但它因其简单性和易于实现而广受欢迎。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def sieve_of_eratosthenes(n):</span><br><span class=\"line\">    # 初始化一个布尔数组，所有的值都设为True</span><br><span class=\"line\">    prime = [True for _ in range(n+1)]</span><br><span class=\"line\">    p = 2</span><br><span class=\"line\">    while (p * p &lt;= n):</span><br><span class=\"line\">        # 如果prime[p]没有被改变，那么它是一个质数</span><br><span class=\"line\">        if prime[p] == True:</span><br><span class=\"line\">            # 更新所有p的倍数为非质数</span><br><span class=\"line\">            for i in range(p * p, n+1, p):</span><br><span class=\"line\">                prime[i] = False</span><br><span class=\"line\">        p += 1</span><br><span class=\"line\"></span><br><span class=\"line\">    # 收集所有质数</span><br><span class=\"line\">    primes = []</span><br><span class=\"line\">    for p in range(2, n):</span><br><span class=\"line\">        if prime[p]:</span><br><span class=\"line\">            primes.append(p)</span><br><span class=\"line\">    return primes</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例：找出小于30的所有质数</span><br><span class=\"line\">print(sieve_of_eratosthenes(30))</span><br></pre></td></tr></table></figure>\n"},{"title":"题解|算法竞赛团队培训第一次考核","date":"2024-10-27T11:57:37.000Z","_content":"\n\n\n[TOC]\n\n## A.[小红的签到题](https://ac.nowcoder.com/acm/contest/94289/A)\n\n### 解析\n\n题目描述了一个情景，其中 \\( a \\) 是题目的总数，\\( b \\) 是参赛人数，而 \\( c \\) 是所有人通过题目的总数。要找出最多有多少人“ak”，即通过了所有题目。\n\n在这种情况下，如果每个人至少通过了一道题，那么最多可以通过 \\( a * b \\) 道题。但题目只告诉我们总共通过了 \\( c \\) 道题。所以，要找出最多有多少人通过了所有题目，我们可以将 \\( c \\) 除以 \\( a \\)，因为每个人要“ak”就需要通过 \\( a \\) 道题。\n\n为什么不需要计算余数呢？因为题目问的是最多有多少人“ak”，这意味着我们是在寻找一个整数解，即最多有多少完整地通过了所有题目的人。如果 \\( c \\) 不能被 \\( a \\) 整除，那么就意味着不可能有更多的人完全通过所有题目，因为余数代表的是不足以构成一个完整“ak”的人数。\n\n例如，如果 \\( c = 123 \\) 且 \\( a = 6 \\)，那么 \\( 123 / 6 = 20 \\) 余 3。这表示最多有 20 个人可以完全通过所有题目，因为剩下的 3 道题不足以让更多的人完成“ak”。\n\n因此，直接用 \\( c \\) 除以 \\( a \\) 得到的整数部分就是答案。\n\n## Code\n\n```c++\n#include<iostream>\nusing namespace std;\nint main(){\n\tint a,b,c;\n\tcin>>a>>b>>c;\n\tcout<<c/a<<endl;\n\treturn 0;\n}\n```\n\n\n\n```python\na,b,c=map(int,input().split())\nprint(int(c/a))\n```\n\n\n\n## B.[判断闰年](https://ac.nowcoder.com/acm/contest/94289/B)\n\n### 解析\n\n公历闰年的简单计算方法（符合以下条件之一的年份即为闰年）：\n\n1.能被4整除而不能被100整除\n\n2.能被400整除\n\n### Code\n\n```c++\n#include<iostream>\nusing namespace std;\nint main(){\n\tint n;\n\tcin>>n;\n\tif((n%4==0 && n%100!=0) || (n%400==0)){\n\t\tcout<<\"yes\"<<endl;\n\t}\n\telse{\n\t\tcout<<\"no\"<<endl;\n\t}\n\treturn 0;\n}\n```\n\n\n\n```python\nn=int(input())\nif(((n%4==0) and (n%100!=0)) or (n%400==0)):\n    print(\"yes\")\nelse:\n    print(\"no\")\n```\n\n## C.[[NOIP2010\\]数字统计](https://ac.nowcoder.com/acm/contest/94289/C)\n\n## 解析\n\n见代码\n\n### Code\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint L, R;\n\tcin >> L >> R;\n\tint countTwos = 0;  // 重命名变量以避免冲突\n\t\n\tfor (int i = L; i <= R; ++i) {\n\t\tstring num_str = to_string(i);\n\t\tcountTwos += count(num_str.begin(), num_str.end(), '2');  \n\t}\n\t\n\tcout << countTwos << endl;\n\treturn 0;\n}\n\n```\n\n\n\n```python\nL,R=map(int,input().split())\ncount=0\nfor i in range(L,R+1):\n    count+=str(i).count(\"2\")\nprint(count)\n```\n\n## D.[ [NOIP2017\\]图书管理员](https://ac.nowcoder.com/acm/contest/94289/D)\n\n### 解析\n\n见代码\n\n### Code\n\n```C++\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint find(const vector<int>& library, const pair<int, string>& tupleX) {\n    for (int i : library) {\n        string num_str = to_string(i);\n        if (num_str.length() >= tupleX.second.length()) {\n            string suffix = num_str.substr(num_str.length() - tupleX.first);\n            if (suffix == tupleX.second) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int n, q;\n    cin >> n >> q;\n    \n    vector<int> library(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> library[i];\n    }\n    \n    vector<pair<int, string>> needed(q);\n    for (int i = 0; i < q; ++i) {\n        int x;\n        string s;\n        cin >> x >> s;\n        needed[i] = make_pair(x, s);\n    }\n    \n    sort(library.begin(), library.end());\n    \n    for (const auto& i : needed) {\n        cout << find(library, i) << endl;\n    }\n    \n    return 0;\n}\n\n```\n\n\n\n```python\nn,q=map(int,input().split())\nlibrary=[int(input()) for _ in range(n)]\n#和下面代码是一个意思:\n# for _ in range(n):\n#     library.append(int(input()))\nneeded=[tuple(map(int,input().split())) for _ in range(q)]\n#和下面代码是一个意思:\n# for _ in range(q):\n#     needed.append(tuple(map(int,input().split())))\n#test:\n# print(library)\n# print(needed)\nlibrary.sort()\ndef find(tupleX):\n    for i in library:\n        a=-tupleX[0]\n        if str(i)[a:]==str(tupleX[1]):\n            return i\n    return -1\nfor i in needed:\n    print(find(i))\n\n```\n\n## E.[最大公约数(lcm)](https://ac.nowcoder.com/acm/contest/94289/E)\n\n### 解析\n\n辗转相除法求最大公因数：\n\n```c++\n#include <iostream>\nusing namespace std;\nint gcd(int a, int b)\n{\n    if (a % b==0) return b;\n    else return gcd(b, a % b);\n}\nint x, y; \nint main(){\n\t\n\tcin >> x >> y;\n\tcout << gcd(x, y);\n\t\n\treturn 0;\n}\n```\n\n```python\ndef gcd(m,n):\n    while m%n != 0:\n        oldm = m\n        oldn = n\n\n        m = oldn\n        n = oldm%oldn\n    return n\n```\n\n**最小公倍数（LCM）等于两个数的乘积除以它们的最大公因数（GCD）**\n\n### Code\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n\tunsigned long long a,b;\n    cin>>a>>b;\n    cout<<lcm(a,b);\n    return 0;\n}\n```\n\n\n\n```python\nimport math\na,b=map(int,input().split())\nprint(math.lcm(a,b))\n```\n\n## F.[ 简单的整除](https://ac.nowcoder.com/acm/contest/94289/F)\n\n### 解析\n\n见代码\n\n### Code\n\n```c++\n#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n\tint x;\n\tcin >> x;\n\tvector<int> li = {2, 3, 5, 7};\n\t\n\tfor (int i : li) {\n\t\tif (x % i == 0) {\n\t\t\tcout << \"YES\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (x % 2 != 0 && x % 3 != 0 && x % 5 != 0 && x % 7 != 0) {\n\t\tcout << \"NO\" << endl;\n\t}\n\t\n\treturn 0;\n}\n\n```\n\n\n\n```python\nx=int(input())\nli=[2,3,5,7]\nfor i in li:\n    if x%i==0:\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n```\n\n## I.[悬崖](https://ac.nowcoder.com/acm/contest/94289/I)\n\n### 题目\n\n小沙被困在两个巨大的墙壁之中快要被压死了，但是两个墙壁中间就是万丈悬崖，小沙想要多活一会，他脚底下有一个非常强大的弹跳鞋，每一次跳跃可以使他向着对面的墙壁飞行x米，但是他必须要踩上墙壁才能进行下一次跳跃，现已知两个墙壁中间间隔n米，并且每次跳跃两个墙壁之间的距离会减少1米，也就是说小沙在n秒后就会被压死，如果不考虑跳跃期间墙壁的移动，请问小沙最多能跳(飞)多少米。\n\n**两面墙壁都没有什么物品可以让小沙能够抓住从而挂在墙壁上，所以小沙要保证一直的跳跃才能不摔下悬崖**\n\n说明：小沙第一次跳跃两米，到对面墙壁，然后两个墙壁的距离变成1米，小沙继续跳到对面墙壁（此时虽然两个墙壁之间只有1米，但是小沙还是可以跳跃两米）例如：\n\n![img](https://uploadfiles.nowcoder.com/images/20220303/371724_1646315836289/9976BCCD254C760651A666CBC1845546)\n\n可以看到虽然墙壁之间的距离只有一米，但是小沙还是可以跳两米远\n\n### Code\n\n#### [牛客513205243号](https://ac.nowcoder.com/acm/contest/profile/513205243) 提交的代码\n\n```C++\n#include<iostream>\nusing namespace std;\nint main(){\n\tlong long x, n;\n\tcin >> x >> n;\n\tif(x>=n)\n\t\tcout << n * x;\n\telse \n\t\tcout << x ;\n\treturn 0;\n}\n```\n\n#### [砍个价沈](https://ac.nowcoder.com/acm/contest/profile/602481815) 提交的代码\n\n```python\nx,n=map(int,input().split())\nif x>=n:\n    print(int(x*n))\nelse:\n    print(int(x))\n```\n\n### J.[ 猜拳游戏](https://ac.nowcoder.com/acm/contest/94289/J)\n\n### 题目\n\n你正在与*长途*玩石头剪刀布的猜拳游戏。\n\n请回忆石头剪刀布的游戏规则：两个人同时伸出手，分别出示石头（用 shitou 表示）、剪刀（用 jiandao 表示）或布（用 bu 表示）的手势。石头胜剪刀，剪刀胜布，布胜石头。如果两个人出示的手势相同，则是平局，需要重新进行游戏。\n\n在开始游戏之前，*长途*会告诉你他要出石头、剪刀还是布。\n\n然而实际上，*长途*是在欺骗你。他认为你会相信他的话，并且认为你一定会根据他说的话选择能战胜他的手势（例如，他说他会出石头，他便认为你会出布）。\n\n所以最终，*长途*不会按照他告诉你的手势出拳，而是选择自己所认为一定能战胜你的手势。\n\n现在你已经看透了他的小心思。请问，在知道他告诉你他要出什么手势的情况下，你应该出什么手势才能取胜？\n\n### Code\n\n#### [牛客513205243号](https://ac.nowcoder.com/acm/contest/profile/513205243) 提交的代码\n\n```c++\n#include<stdio.h>\nint main(){\n\tchar n[100];\n\tscanf(\"%s\",&n);\n\tprintf(\"%s\",n);\n\treturn 0;\n}\n```\n\n#### [砍个价沈](https://ac.nowcoder.com/acm/contest/profile/602481815) 提交的代码\n\n```python\ni=str(input())\nif i==\"shitou\":\n    print(\"shitou\")\nelif i==\"jiandao\":\n    print(\"jiandao\")\nelse:\n    print(\"bu\")\n```\n\n\n\n```python\nprint(input())\n```\n\n## G.[小苯的石子游戏](https://ac.nowcoder.com/acm/contest/94289/G)\n\n### 解析\n\n\n\n#### 博弈的定义：\n\n博弈的基本要素包括参与人（players）、行动（actions）、信息（information）、策略（strategies）、收益（payoffs）和均衡（equilibria）。\n\n#### 标准表达式（normal form）：\n\n设在有 \\( $n$ \\) 个参与者的博弈中，令 \\( $S_i$ \\) 表示参与者 \\( $i$ \\) 可选择的战略集合（战略空间），其中任意一个特定的战略用 \\( $s_i^*$ \\) 表示（$s_i^* \\in S_i $）。当每个参与者都选定一个策略后，形成了博弈的一个战略组合 \\( (s_1, s_2, \\ldots, s_n) \\)。令 \\( $u_i$ \\) 表示第 \\( $i$ \\) 个参与者选择对应策略后的收益函数。由此可定义博弈的标准表达式：\\( $G = \\{S_1, \\ldots, S_n, u_1, \\ldots, u_n\\}$ \\)。\n\n#### 收益矩阵：\n\n两人博弈的标准表达式通常可以使用收益矩阵来表示。例如，经典的囚徒困境问题。两个犯罪嫌疑人被逮捕并被分别隔离审问，他们不同的行动将带来不同的后果。如果两人都不坦白（沉默），将被判入狱1个月；如果双方都坦白（招认），两人都将判处6个月；如果一人招认而另一人拒不坦白，则招认一方将马上释放，而不坦白的另一人将判处9个月。两人博弈的收益矩阵可表示为如下形式，其中每一单元格有两个数字，分别表示囚徒1和囚徒2的收益：\n![囚徒困境](https://i-blog.csdnimg.cn/blog_migrate/9187d558af8a7ee6b9cb70a47de3f076.png#pic_center)\n\n#### 策略：\n\n参与人关于其行动的完备集合，即考虑每一种可预见情况下选择的行动，即使那种情况出现不一定会出现。例如，如果参与人在1989年自杀，他的策略里也应当包括如果他在1990年还活着应该采取的对应行动。\n策略和行动是有区别的，而在一些简单的博弈中，两者的表现可能是一致的，如上述的囚徒困境中博弈双方的策略和行动可选集都是 \\($\\{沉默, 招认\\}$\\)。\n\n#### 均衡：\n\n由博弈中的 \\( n \\) 个参与人选取的最佳策略所组成的一个策略组合 \\( $s^* = (s_1^*, \\ldots, s_n^*)$ \\)。\n\n#### 巴什博弈（Bash Game）：\n\n有$n$ 个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取 $m$ 个（$m < n$ ）。最后取光者得胜。\n分析：\n显然，如果 \\( $n = m + 1$ \\)，那么由于一次最多只能取 \\( $m$ \\) 个物品，所以无论先取者拿走多少个，后取者都能够一次拿走剩余的物品，故后者必然取胜。根据这样的规律，我们发现了如何取胜的法则。\n如果 \\( $n = (m + 1)r + s$ \\) r 为任意自然数，\\( $0 \\leq s \\leq m$ \\)，那么先取者首先拿走 \\( $s$ \\) 个物品，接下来若后取者拿走 \\( $k$ \\)（\\( $1 \\leq k \\leq m$ \\)）个，那么先取者再拿走 \\( $m + 1 - k$ \\) 个，结果剩下 \\( $(m + 1) \\times (r - 1)$ \\) 个，以后都保持这样的取法，那么后取者最终会面临 \\( $m + 1$ \\) 的局面，而先取者则必然获胜。总之，要保持给对手留下 \\( $m + 1$ \\) 的倍数，最后就一定能获胜。\n\n### Code\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nvoid solve() {\n\tint n;\n\tcin >> n;\n\tvector<int> a(n + 1);\n\tfor(int i = 1; i <= n; i++) {\n\t\tcin >> a[i];\n\t} \n\t// sort(a.begin() + 1, a.end()); // 题目已经保证a有序，可以不写这句\n\tint s1 = 0, s2 = 0;\n\tint f = 0;\n\tfor(int i = n; i; i--) {\n\t\tif(!f) s1 += a[i];\n\t\telse s2 += a[i];\n\t\tf ^= 1;\n\t}\n\tif(s1 > s2) {\n\t\tcout << \"Alice\" << endl;\n\t}\n\telse {\n\t\tcout << \"Bob\" << endl;\n\t}\n}\n```\n\n\n\n```python\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    #player=[\"Alice\",\"Bob\"]\n    player=[0,0]\n    count=0\n    while a!=[]:\n        player[count%2]+=a.pop(-1)\n        count+=1\n    if player[0]>player[1]:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\n```\n","source":"_posts/题解-算法竞赛团队培训第一次考核.md","raw":"---\ntitle: 题解|算法竞赛团队培训第一次考核\ndate: 2024-10-27 19:57:37\ntags:\n---\n\n\n\n[TOC]\n\n## A.[小红的签到题](https://ac.nowcoder.com/acm/contest/94289/A)\n\n### 解析\n\n题目描述了一个情景，其中 \\( a \\) 是题目的总数，\\( b \\) 是参赛人数，而 \\( c \\) 是所有人通过题目的总数。要找出最多有多少人“ak”，即通过了所有题目。\n\n在这种情况下，如果每个人至少通过了一道题，那么最多可以通过 \\( a * b \\) 道题。但题目只告诉我们总共通过了 \\( c \\) 道题。所以，要找出最多有多少人通过了所有题目，我们可以将 \\( c \\) 除以 \\( a \\)，因为每个人要“ak”就需要通过 \\( a \\) 道题。\n\n为什么不需要计算余数呢？因为题目问的是最多有多少人“ak”，这意味着我们是在寻找一个整数解，即最多有多少完整地通过了所有题目的人。如果 \\( c \\) 不能被 \\( a \\) 整除，那么就意味着不可能有更多的人完全通过所有题目，因为余数代表的是不足以构成一个完整“ak”的人数。\n\n例如，如果 \\( c = 123 \\) 且 \\( a = 6 \\)，那么 \\( 123 / 6 = 20 \\) 余 3。这表示最多有 20 个人可以完全通过所有题目，因为剩下的 3 道题不足以让更多的人完成“ak”。\n\n因此，直接用 \\( c \\) 除以 \\( a \\) 得到的整数部分就是答案。\n\n## Code\n\n```c++\n#include<iostream>\nusing namespace std;\nint main(){\n\tint a,b,c;\n\tcin>>a>>b>>c;\n\tcout<<c/a<<endl;\n\treturn 0;\n}\n```\n\n\n\n```python\na,b,c=map(int,input().split())\nprint(int(c/a))\n```\n\n\n\n## B.[判断闰年](https://ac.nowcoder.com/acm/contest/94289/B)\n\n### 解析\n\n公历闰年的简单计算方法（符合以下条件之一的年份即为闰年）：\n\n1.能被4整除而不能被100整除\n\n2.能被400整除\n\n### Code\n\n```c++\n#include<iostream>\nusing namespace std;\nint main(){\n\tint n;\n\tcin>>n;\n\tif((n%4==0 && n%100!=0) || (n%400==0)){\n\t\tcout<<\"yes\"<<endl;\n\t}\n\telse{\n\t\tcout<<\"no\"<<endl;\n\t}\n\treturn 0;\n}\n```\n\n\n\n```python\nn=int(input())\nif(((n%4==0) and (n%100!=0)) or (n%400==0)):\n    print(\"yes\")\nelse:\n    print(\"no\")\n```\n\n## C.[[NOIP2010\\]数字统计](https://ac.nowcoder.com/acm/contest/94289/C)\n\n## 解析\n\n见代码\n\n### Code\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint L, R;\n\tcin >> L >> R;\n\tint countTwos = 0;  // 重命名变量以避免冲突\n\t\n\tfor (int i = L; i <= R; ++i) {\n\t\tstring num_str = to_string(i);\n\t\tcountTwos += count(num_str.begin(), num_str.end(), '2');  \n\t}\n\t\n\tcout << countTwos << endl;\n\treturn 0;\n}\n\n```\n\n\n\n```python\nL,R=map(int,input().split())\ncount=0\nfor i in range(L,R+1):\n    count+=str(i).count(\"2\")\nprint(count)\n```\n\n## D.[ [NOIP2017\\]图书管理员](https://ac.nowcoder.com/acm/contest/94289/D)\n\n### 解析\n\n见代码\n\n### Code\n\n```C++\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint find(const vector<int>& library, const pair<int, string>& tupleX) {\n    for (int i : library) {\n        string num_str = to_string(i);\n        if (num_str.length() >= tupleX.second.length()) {\n            string suffix = num_str.substr(num_str.length() - tupleX.first);\n            if (suffix == tupleX.second) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int n, q;\n    cin >> n >> q;\n    \n    vector<int> library(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> library[i];\n    }\n    \n    vector<pair<int, string>> needed(q);\n    for (int i = 0; i < q; ++i) {\n        int x;\n        string s;\n        cin >> x >> s;\n        needed[i] = make_pair(x, s);\n    }\n    \n    sort(library.begin(), library.end());\n    \n    for (const auto& i : needed) {\n        cout << find(library, i) << endl;\n    }\n    \n    return 0;\n}\n\n```\n\n\n\n```python\nn,q=map(int,input().split())\nlibrary=[int(input()) for _ in range(n)]\n#和下面代码是一个意思:\n# for _ in range(n):\n#     library.append(int(input()))\nneeded=[tuple(map(int,input().split())) for _ in range(q)]\n#和下面代码是一个意思:\n# for _ in range(q):\n#     needed.append(tuple(map(int,input().split())))\n#test:\n# print(library)\n# print(needed)\nlibrary.sort()\ndef find(tupleX):\n    for i in library:\n        a=-tupleX[0]\n        if str(i)[a:]==str(tupleX[1]):\n            return i\n    return -1\nfor i in needed:\n    print(find(i))\n\n```\n\n## E.[最大公约数(lcm)](https://ac.nowcoder.com/acm/contest/94289/E)\n\n### 解析\n\n辗转相除法求最大公因数：\n\n```c++\n#include <iostream>\nusing namespace std;\nint gcd(int a, int b)\n{\n    if (a % b==0) return b;\n    else return gcd(b, a % b);\n}\nint x, y; \nint main(){\n\t\n\tcin >> x >> y;\n\tcout << gcd(x, y);\n\t\n\treturn 0;\n}\n```\n\n```python\ndef gcd(m,n):\n    while m%n != 0:\n        oldm = m\n        oldn = n\n\n        m = oldn\n        n = oldm%oldn\n    return n\n```\n\n**最小公倍数（LCM）等于两个数的乘积除以它们的最大公因数（GCD）**\n\n### Code\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n\tunsigned long long a,b;\n    cin>>a>>b;\n    cout<<lcm(a,b);\n    return 0;\n}\n```\n\n\n\n```python\nimport math\na,b=map(int,input().split())\nprint(math.lcm(a,b))\n```\n\n## F.[ 简单的整除](https://ac.nowcoder.com/acm/contest/94289/F)\n\n### 解析\n\n见代码\n\n### Code\n\n```c++\n#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n\tint x;\n\tcin >> x;\n\tvector<int> li = {2, 3, 5, 7};\n\t\n\tfor (int i : li) {\n\t\tif (x % i == 0) {\n\t\t\tcout << \"YES\" << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (x % 2 != 0 && x % 3 != 0 && x % 5 != 0 && x % 7 != 0) {\n\t\tcout << \"NO\" << endl;\n\t}\n\t\n\treturn 0;\n}\n\n```\n\n\n\n```python\nx=int(input())\nli=[2,3,5,7]\nfor i in li:\n    if x%i==0:\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n```\n\n## I.[悬崖](https://ac.nowcoder.com/acm/contest/94289/I)\n\n### 题目\n\n小沙被困在两个巨大的墙壁之中快要被压死了，但是两个墙壁中间就是万丈悬崖，小沙想要多活一会，他脚底下有一个非常强大的弹跳鞋，每一次跳跃可以使他向着对面的墙壁飞行x米，但是他必须要踩上墙壁才能进行下一次跳跃，现已知两个墙壁中间间隔n米，并且每次跳跃两个墙壁之间的距离会减少1米，也就是说小沙在n秒后就会被压死，如果不考虑跳跃期间墙壁的移动，请问小沙最多能跳(飞)多少米。\n\n**两面墙壁都没有什么物品可以让小沙能够抓住从而挂在墙壁上，所以小沙要保证一直的跳跃才能不摔下悬崖**\n\n说明：小沙第一次跳跃两米，到对面墙壁，然后两个墙壁的距离变成1米，小沙继续跳到对面墙壁（此时虽然两个墙壁之间只有1米，但是小沙还是可以跳跃两米）例如：\n\n![img](https://uploadfiles.nowcoder.com/images/20220303/371724_1646315836289/9976BCCD254C760651A666CBC1845546)\n\n可以看到虽然墙壁之间的距离只有一米，但是小沙还是可以跳两米远\n\n### Code\n\n#### [牛客513205243号](https://ac.nowcoder.com/acm/contest/profile/513205243) 提交的代码\n\n```C++\n#include<iostream>\nusing namespace std;\nint main(){\n\tlong long x, n;\n\tcin >> x >> n;\n\tif(x>=n)\n\t\tcout << n * x;\n\telse \n\t\tcout << x ;\n\treturn 0;\n}\n```\n\n#### [砍个价沈](https://ac.nowcoder.com/acm/contest/profile/602481815) 提交的代码\n\n```python\nx,n=map(int,input().split())\nif x>=n:\n    print(int(x*n))\nelse:\n    print(int(x))\n```\n\n### J.[ 猜拳游戏](https://ac.nowcoder.com/acm/contest/94289/J)\n\n### 题目\n\n你正在与*长途*玩石头剪刀布的猜拳游戏。\n\n请回忆石头剪刀布的游戏规则：两个人同时伸出手，分别出示石头（用 shitou 表示）、剪刀（用 jiandao 表示）或布（用 bu 表示）的手势。石头胜剪刀，剪刀胜布，布胜石头。如果两个人出示的手势相同，则是平局，需要重新进行游戏。\n\n在开始游戏之前，*长途*会告诉你他要出石头、剪刀还是布。\n\n然而实际上，*长途*是在欺骗你。他认为你会相信他的话，并且认为你一定会根据他说的话选择能战胜他的手势（例如，他说他会出石头，他便认为你会出布）。\n\n所以最终，*长途*不会按照他告诉你的手势出拳，而是选择自己所认为一定能战胜你的手势。\n\n现在你已经看透了他的小心思。请问，在知道他告诉你他要出什么手势的情况下，你应该出什么手势才能取胜？\n\n### Code\n\n#### [牛客513205243号](https://ac.nowcoder.com/acm/contest/profile/513205243) 提交的代码\n\n```c++\n#include<stdio.h>\nint main(){\n\tchar n[100];\n\tscanf(\"%s\",&n);\n\tprintf(\"%s\",n);\n\treturn 0;\n}\n```\n\n#### [砍个价沈](https://ac.nowcoder.com/acm/contest/profile/602481815) 提交的代码\n\n```python\ni=str(input())\nif i==\"shitou\":\n    print(\"shitou\")\nelif i==\"jiandao\":\n    print(\"jiandao\")\nelse:\n    print(\"bu\")\n```\n\n\n\n```python\nprint(input())\n```\n\n## G.[小苯的石子游戏](https://ac.nowcoder.com/acm/contest/94289/G)\n\n### 解析\n\n\n\n#### 博弈的定义：\n\n博弈的基本要素包括参与人（players）、行动（actions）、信息（information）、策略（strategies）、收益（payoffs）和均衡（equilibria）。\n\n#### 标准表达式（normal form）：\n\n设在有 \\( $n$ \\) 个参与者的博弈中，令 \\( $S_i$ \\) 表示参与者 \\( $i$ \\) 可选择的战略集合（战略空间），其中任意一个特定的战略用 \\( $s_i^*$ \\) 表示（$s_i^* \\in S_i $）。当每个参与者都选定一个策略后，形成了博弈的一个战略组合 \\( (s_1, s_2, \\ldots, s_n) \\)。令 \\( $u_i$ \\) 表示第 \\( $i$ \\) 个参与者选择对应策略后的收益函数。由此可定义博弈的标准表达式：\\( $G = \\{S_1, \\ldots, S_n, u_1, \\ldots, u_n\\}$ \\)。\n\n#### 收益矩阵：\n\n两人博弈的标准表达式通常可以使用收益矩阵来表示。例如，经典的囚徒困境问题。两个犯罪嫌疑人被逮捕并被分别隔离审问，他们不同的行动将带来不同的后果。如果两人都不坦白（沉默），将被判入狱1个月；如果双方都坦白（招认），两人都将判处6个月；如果一人招认而另一人拒不坦白，则招认一方将马上释放，而不坦白的另一人将判处9个月。两人博弈的收益矩阵可表示为如下形式，其中每一单元格有两个数字，分别表示囚徒1和囚徒2的收益：\n![囚徒困境](https://i-blog.csdnimg.cn/blog_migrate/9187d558af8a7ee6b9cb70a47de3f076.png#pic_center)\n\n#### 策略：\n\n参与人关于其行动的完备集合，即考虑每一种可预见情况下选择的行动，即使那种情况出现不一定会出现。例如，如果参与人在1989年自杀，他的策略里也应当包括如果他在1990年还活着应该采取的对应行动。\n策略和行动是有区别的，而在一些简单的博弈中，两者的表现可能是一致的，如上述的囚徒困境中博弈双方的策略和行动可选集都是 \\($\\{沉默, 招认\\}$\\)。\n\n#### 均衡：\n\n由博弈中的 \\( n \\) 个参与人选取的最佳策略所组成的一个策略组合 \\( $s^* = (s_1^*, \\ldots, s_n^*)$ \\)。\n\n#### 巴什博弈（Bash Game）：\n\n有$n$ 个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取 $m$ 个（$m < n$ ）。最后取光者得胜。\n分析：\n显然，如果 \\( $n = m + 1$ \\)，那么由于一次最多只能取 \\( $m$ \\) 个物品，所以无论先取者拿走多少个，后取者都能够一次拿走剩余的物品，故后者必然取胜。根据这样的规律，我们发现了如何取胜的法则。\n如果 \\( $n = (m + 1)r + s$ \\) r 为任意自然数，\\( $0 \\leq s \\leq m$ \\)，那么先取者首先拿走 \\( $s$ \\) 个物品，接下来若后取者拿走 \\( $k$ \\)（\\( $1 \\leq k \\leq m$ \\)）个，那么先取者再拿走 \\( $m + 1 - k$ \\) 个，结果剩下 \\( $(m + 1) \\times (r - 1)$ \\) 个，以后都保持这样的取法，那么后取者最终会面临 \\( $m + 1$ \\) 的局面，而先取者则必然获胜。总之，要保持给对手留下 \\( $m + 1$ \\) 的倍数，最后就一定能获胜。\n\n### Code\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nvoid solve() {\n\tint n;\n\tcin >> n;\n\tvector<int> a(n + 1);\n\tfor(int i = 1; i <= n; i++) {\n\t\tcin >> a[i];\n\t} \n\t// sort(a.begin() + 1, a.end()); // 题目已经保证a有序，可以不写这句\n\tint s1 = 0, s2 = 0;\n\tint f = 0;\n\tfor(int i = n; i; i--) {\n\t\tif(!f) s1 += a[i];\n\t\telse s2 += a[i];\n\t\tf ^= 1;\n\t}\n\tif(s1 > s2) {\n\t\tcout << \"Alice\" << endl;\n\t}\n\telse {\n\t\tcout << \"Bob\" << endl;\n\t}\n}\n```\n\n\n\n```python\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    #player=[\"Alice\",\"Bob\"]\n    player=[0,0]\n    count=0\n    while a!=[]:\n        player[count%2]+=a.pop(-1)\n        count+=1\n    if player[0]>player[1]:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\n```\n","slug":"题解-算法竞赛团队培训第一次考核","published":1,"updated":"2024-10-27T11:58:22.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm42jql490001k8wccum802du","content":"<p>[TOC]</p>\n<h2 id=\"A-小红的签到题\"><a href=\"#A-小红的签到题\" class=\"headerlink\" title=\"A.小红的签到题\"></a>A.<a href=\"https://ac.nowcoder.com/acm/contest/94289/A\">小红的签到题</a></h2><h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>题目描述了一个情景，其中 ( a ) 是题目的总数，( b ) 是参赛人数，而 ( c ) 是所有人通过题目的总数。要找出最多有多少人“ak”，即通过了所有题目。</p>\n<p>在这种情况下，如果每个人至少通过了一道题，那么最多可以通过 ( a * b ) 道题。但题目只告诉我们总共通过了 ( c ) 道题。所以，要找出最多有多少人通过了所有题目，我们可以将 ( c ) 除以 ( a )，因为每个人要“ak”就需要通过 ( a ) 道题。</p>\n<p>为什么不需要计算余数呢？因为题目问的是最多有多少人“ak”，这意味着我们是在寻找一个整数解，即最多有多少完整地通过了所有题目的人。如果 ( c ) 不能被 ( a ) 整除，那么就意味着不可能有更多的人完全通过所有题目，因为余数代表的是不足以构成一个完整“ak”的人数。</p>\n<p>例如，如果 ( c &#x3D; 123 ) 且 ( a &#x3D; 6 )，那么 ( 123 &#x2F; 6 &#x3D; 20 ) 余 3。这表示最多有 20 个人可以完全通过所有题目，因为剩下的 3 道题不足以让更多的人完成“ak”。</p>\n<p>因此，直接用 ( c ) 除以 ( a ) 得到的整数部分就是答案。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\tcin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">\tcout&lt;&lt;c/a&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a,b,c=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(c/a))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"B-判断闰年\"><a href=\"#B-判断闰年\" class=\"headerlink\" title=\"B.判断闰年\"></a>B.<a href=\"https://ac.nowcoder.com/acm/contest/94289/B\">判断闰年</a></h2><h3 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>公历闰年的简单计算方法（符合以下条件之一的年份即为闰年）：</p>\n<p>1.能被4整除而不能被100整除</p>\n<p>2.能被400整除</p>\n<h3 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((n%<span class=\"number\">4</span>==<span class=\"number\">0</span> &amp;&amp; n%<span class=\"number\">100</span>!=<span class=\"number\">0</span>) || (n%<span class=\"number\">400</span>==<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;yes&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;no&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span>(((n%<span class=\"number\">4</span>==<span class=\"number\">0</span>) <span class=\"keyword\">and</span> (n%<span class=\"number\">100</span>!=<span class=\"number\">0</span>)) <span class=\"keyword\">or</span> (n%<span class=\"number\">400</span>==<span class=\"number\">0</span>)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;yes&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-NOIP2010-数字统计\"><a href=\"#C-NOIP2010-数字统计\" class=\"headerlink\" title=\"C.[NOIP2010]数字统计\"></a>C.[<a href=\"https://ac.nowcoder.com/acm/contest/94289/C\">NOIP2010]数字统计</a></h2><h2 id=\"解析-2\"><a href=\"#解析-2\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>见代码</p>\n<h3 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> L, R;</span><br><span class=\"line\">\tcin &gt;&gt; L &gt;&gt; R;</span><br><span class=\"line\">\t<span class=\"type\">int</span> countTwos = <span class=\"number\">0</span>;  <span class=\"comment\">// 重命名变量以避免冲突</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class=\"line\">\t\tstring num_str = <span class=\"built_in\">to_string</span>(i);</span><br><span class=\"line\">\t\tcountTwos += <span class=\"built_in\">count</span>(num_str.<span class=\"built_in\">begin</span>(), num_str.<span class=\"built_in\">end</span>(), <span class=\"string\">&#x27;2&#x27;</span>);  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; countTwos &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L,R=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">count=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(L,R+<span class=\"number\">1</span>):</span><br><span class=\"line\">    count+=<span class=\"built_in\">str</span>(i).count(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"D-NOIP2017-图书管理员\"><a href=\"#D-NOIP2017-图书管理员\" class=\"headerlink\" title=\"D.[ NOIP2017]图书管理员\"></a>D.[ <a href=\"https://ac.nowcoder.com/acm/contest/94289/D\">NOIP2017]图书管理员</a></h2><h3 id=\"解析-3\"><a href=\"#解析-3\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>见代码</p>\n<h3 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; library, <span class=\"type\">const</span> pair&lt;<span class=\"type\">int</span>, string&gt;&amp; tupleX)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : library) &#123;</span><br><span class=\"line\">        string num_str = <span class=\"built_in\">to_string</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num_str.<span class=\"built_in\">length</span>() &gt;= tupleX.second.<span class=\"built_in\">length</span>()) &#123;</span><br><span class=\"line\">            string suffix = num_str.<span class=\"built_in\">substr</span>(num_str.<span class=\"built_in\">length</span>() - tupleX.first);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (suffix == tupleX.second) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, q;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">library</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; library[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, string&gt;&gt; <span class=\"built_in\">needed</span>(q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; s;</span><br><span class=\"line\">        needed[i] = <span class=\"built_in\">make_pair</span>(x, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(library.<span class=\"built_in\">begin</span>(), library.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; i : needed) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">find</span>(library, i) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n,q=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">library=[<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>()) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\"><span class=\"comment\">#和下面代码是一个意思:</span></span><br><span class=\"line\"><span class=\"comment\"># for _ in range(n):</span></span><br><span class=\"line\"><span class=\"comment\">#     library.append(int(input()))</span></span><br><span class=\"line\">needed=[<span class=\"built_in\">tuple</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(q)]</span><br><span class=\"line\"><span class=\"comment\">#和下面代码是一个意思:</span></span><br><span class=\"line\"><span class=\"comment\"># for _ in range(q):</span></span><br><span class=\"line\"><span class=\"comment\">#     needed.append(tuple(map(int,input().split())))</span></span><br><span class=\"line\"><span class=\"comment\">#test:</span></span><br><span class=\"line\"><span class=\"comment\"># print(library)</span></span><br><span class=\"line\"><span class=\"comment\"># print(needed)</span></span><br><span class=\"line\">library.sort()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">tupleX</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> library:</span><br><span class=\"line\">        a=-tupleX[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">str</span>(i)[a:]==<span class=\"built_in\">str</span>(tupleX[<span class=\"number\">1</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> needed:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(find(i))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"E-最大公约数-lcm\"><a href=\"#E-最大公约数-lcm\" class=\"headerlink\" title=\"E.最大公约数(lcm)\"></a>E.<a href=\"https://ac.nowcoder.com/acm/contest/94289/E\">最大公约数(lcm)</a></h2><h3 id=\"解析-4\"><a href=\"#解析-4\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>辗转相除法求最大公因数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a % b==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">gcd</span>(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> x, y; </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">gcd</span>(x, y);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">m,n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">while</span> m%n != <span class=\"number\">0</span>:</span><br><span class=\"line\">        oldm = m</span><br><span class=\"line\">        oldn = n</span><br><span class=\"line\"></span><br><span class=\"line\">        m = oldn</span><br><span class=\"line\">        n = oldm%oldn</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n</span><br></pre></td></tr></table></figure>\n\n<p><strong>最小公倍数（LCM）等于两个数的乘积除以它们的最大公因数（GCD）</strong></p>\n<h3 id=\"Code-4\"><a href=\"#Code-4\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> a,b;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"built_in\">lcm</span>(a,b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\">a,b=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.lcm(a,b))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"F-简单的整除\"><a href=\"#F-简单的整除\" class=\"headerlink\" title=\"F. 简单的整除\"></a>F.<a href=\"https://ac.nowcoder.com/acm/contest/94289/F\"> 简单的整除</a></h2><h3 id=\"解析-5\"><a href=\"#解析-5\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>见代码</p>\n<h3 id=\"Code-5\"><a href=\"#Code-5\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\tcin &gt;&gt; x;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; li = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : li) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x % <span class=\"number\">2</span> != <span class=\"number\">0</span> &amp;&amp; x % <span class=\"number\">3</span> != <span class=\"number\">0</span> &amp;&amp; x % <span class=\"number\">5</span> != <span class=\"number\">0</span> &amp;&amp; x % <span class=\"number\">7</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">li=[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x%i==<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;YES&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;NO&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"I-悬崖\"><a href=\"#I-悬崖\" class=\"headerlink\" title=\"I.悬崖\"></a>I.<a href=\"https://ac.nowcoder.com/acm/contest/94289/I\">悬崖</a></h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>小沙被困在两个巨大的墙壁之中快要被压死了，但是两个墙壁中间就是万丈悬崖，小沙想要多活一会，他脚底下有一个非常强大的弹跳鞋，每一次跳跃可以使他向着对面的墙壁飞行x米，但是他必须要踩上墙壁才能进行下一次跳跃，现已知两个墙壁中间间隔n米，并且每次跳跃两个墙壁之间的距离会减少1米，也就是说小沙在n秒后就会被压死，如果不考虑跳跃期间墙壁的移动，请问小沙最多能跳(飞)多少米。</p>\n<p><strong>两面墙壁都没有什么物品可以让小沙能够抓住从而挂在墙壁上，所以小沙要保证一直的跳跃才能不摔下悬崖</strong></p>\n<p>说明：小沙第一次跳跃两米，到对面墙壁，然后两个墙壁的距离变成1米，小沙继续跳到对面墙壁（此时虽然两个墙壁之间只有1米，但是小沙还是可以跳跃两米）例如：</p>\n<p><img src=\"https://uploadfiles.nowcoder.com/images/20220303/371724_1646315836289/9976BCCD254C760651A666CBC1845546\" alt=\"img\"></p>\n<p>可以看到虽然墙壁之间的距离只有一米，但是小沙还是可以跳两米远</p>\n<h3 id=\"Code-6\"><a href=\"#Code-6\" class=\"headerlink\" title=\"Code\"></a>Code</h3><h4 id=\"牛客513205243号-提交的代码\"><a href=\"#牛客513205243号-提交的代码\" class=\"headerlink\" title=\"牛客513205243号 提交的代码\"></a><a href=\"https://ac.nowcoder.com/acm/contest/profile/513205243\">牛客513205243号</a> 提交的代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> x, n;</span><br><span class=\"line\">\tcin &gt;&gt; x &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&gt;=n)</span><br><span class=\"line\">\t\tcout &lt;&lt; n * x;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\tcout &lt;&lt; x ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"砍个价沈-提交的代码\"><a href=\"#砍个价沈-提交的代码\" class=\"headerlink\" title=\"砍个价沈 提交的代码\"></a><a href=\"https://ac.nowcoder.com/acm/contest/profile/602481815\">砍个价沈</a> 提交的代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x,n=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\"><span class=\"keyword\">if</span> x&gt;=n:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(x*n))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(x))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"J-猜拳游戏\"><a href=\"#J-猜拳游戏\" class=\"headerlink\" title=\"J. 猜拳游戏\"></a>J.<a href=\"https://ac.nowcoder.com/acm/contest/94289/J\"> 猜拳游戏</a></h3><h3 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>你正在与<em>长途</em>玩石头剪刀布的猜拳游戏。</p>\n<p>请回忆石头剪刀布的游戏规则：两个人同时伸出手，分别出示石头（用 shitou 表示）、剪刀（用 jiandao 表示）或布（用 bu 表示）的手势。石头胜剪刀，剪刀胜布，布胜石头。如果两个人出示的手势相同，则是平局，需要重新进行游戏。</p>\n<p>在开始游戏之前，<em>长途</em>会告诉你他要出石头、剪刀还是布。</p>\n<p>然而实际上，<em>长途</em>是在欺骗你。他认为你会相信他的话，并且认为你一定会根据他说的话选择能战胜他的手势（例如，他说他会出石头，他便认为你会出布）。</p>\n<p>所以最终，<em>长途</em>不会按照他告诉你的手势出拳，而是选择自己所认为一定能战胜你的手势。</p>\n<p>现在你已经看透了他的小心思。请问，在知道他告诉你他要出什么手势的情况下，你应该出什么手势才能取胜？</p>\n<h3 id=\"Code-7\"><a href=\"#Code-7\" class=\"headerlink\" title=\"Code\"></a>Code</h3><h4 id=\"牛客513205243号-提交的代码-1\"><a href=\"#牛客513205243号-提交的代码-1\" class=\"headerlink\" title=\"牛客513205243号 提交的代码\"></a><a href=\"https://ac.nowcoder.com/acm/contest/profile/513205243\">牛客513205243号</a> 提交的代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> n[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"砍个价沈-提交的代码-1\"><a href=\"#砍个价沈-提交的代码-1\" class=\"headerlink\" title=\"砍个价沈 提交的代码\"></a><a href=\"https://ac.nowcoder.com/acm/contest/profile/602481815\">砍个价沈</a> 提交的代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i=<span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span> i==<span class=\"string\">&quot;shitou&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;shitou&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> i==<span class=\"string\">&quot;jiandao&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;jiandao&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;bu&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">input</span>())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"G-小苯的石子游戏\"><a href=\"#G-小苯的石子游戏\" class=\"headerlink\" title=\"G.小苯的石子游戏\"></a>G.<a href=\"https://ac.nowcoder.com/acm/contest/94289/G\">小苯的石子游戏</a></h2><h3 id=\"解析-6\"><a href=\"#解析-6\" class=\"headerlink\" title=\"解析\"></a>解析</h3><h4 id=\"博弈的定义：\"><a href=\"#博弈的定义：\" class=\"headerlink\" title=\"博弈的定义：\"></a>博弈的定义：</h4><p>博弈的基本要素包括参与人（players）、行动（actions）、信息（information）、策略（strategies）、收益（payoffs）和均衡（equilibria）。</p>\n<h4 id=\"标准表达式（normal-form）：\"><a href=\"#标准表达式（normal-form）：\" class=\"headerlink\" title=\"标准表达式（normal form）：\"></a>标准表达式（normal form）：</h4><p>设在有 ( $n$ ) 个参与者的博弈中，令 ( $S_i$ ) 表示参与者 ( $i$ ) 可选择的战略集合（战略空间），其中任意一个特定的战略用 ( $s_i^*$ ) 表示（$s_i^* \\in S_i $）。当每个参与者都选定一个策略后，形成了博弈的一个战略组合 ( (s_1, s_2, \\ldots, s_n) )。令 ( $u_i$ ) 表示第 ( $i$ ) 个参与者选择对应策略后的收益函数。由此可定义博弈的标准表达式：( $G &#x3D; {S_1, \\ldots, S_n, u_1, \\ldots, u_n}$ )。</p>\n<h4 id=\"收益矩阵：\"><a href=\"#收益矩阵：\" class=\"headerlink\" title=\"收益矩阵：\"></a>收益矩阵：</h4><p>两人博弈的标准表达式通常可以使用收益矩阵来表示。例如，经典的囚徒困境问题。两个犯罪嫌疑人被逮捕并被分别隔离审问，他们不同的行动将带来不同的后果。如果两人都不坦白（沉默），将被判入狱1个月；如果双方都坦白（招认），两人都将判处6个月；如果一人招认而另一人拒不坦白，则招认一方将马上释放，而不坦白的另一人将判处9个月。两人博弈的收益矩阵可表示为如下形式，其中每一单元格有两个数字，分别表示囚徒1和囚徒2的收益：<br><img src=\"https://i-blog.csdnimg.cn/blog_migrate/9187d558af8a7ee6b9cb70a47de3f076.png#pic_center\" alt=\"囚徒困境\"></p>\n<h4 id=\"策略：\"><a href=\"#策略：\" class=\"headerlink\" title=\"策略：\"></a>策略：</h4><p>参与人关于其行动的完备集合，即考虑每一种可预见情况下选择的行动，即使那种情况出现不一定会出现。例如，如果参与人在1989年自杀，他的策略里也应当包括如果他在1990年还活着应该采取的对应行动。<br>策略和行动是有区别的，而在一些简单的博弈中，两者的表现可能是一致的，如上述的囚徒困境中博弈双方的策略和行动可选集都是 (${沉默, 招认}$)。</p>\n<h4 id=\"均衡：\"><a href=\"#均衡：\" class=\"headerlink\" title=\"均衡：\"></a>均衡：</h4><p>由博弈中的 ( n ) 个参与人选取的最佳策略所组成的一个策略组合 ( $s^* &#x3D; (s_1^*, \\ldots, s_n^*)$ )。</p>\n<h4 id=\"巴什博弈（Bash-Game）：\"><a href=\"#巴什博弈（Bash-Game）：\" class=\"headerlink\" title=\"巴什博弈（Bash Game）：\"></a>巴什博弈（Bash Game）：</h4><p>有$n$ 个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取 $m$ 个（$m &lt; n$ ）。最后取光者得胜。<br>分析：<br>显然，如果 ( $n &#x3D; m + 1$ )，那么由于一次最多只能取 ( $m$ ) 个物品，所以无论先取者拿走多少个，后取者都能够一次拿走剩余的物品，故后者必然取胜。根据这样的规律，我们发现了如何取胜的法则。<br>如果 ( $n &#x3D; (m + 1)r + s$ ) r 为任意自然数，( $0 \\leq s \\leq m$ )，那么先取者首先拿走 ( $s$ ) 个物品，接下来若后取者拿走 ( $k$ )（( $1 \\leq k \\leq m$ )）个，那么先取者再拿走 ( $m + 1 - k$ ) 个，结果剩下 ( $(m + 1) \\times (r - 1)$ ) 个，以后都保持这样的取法，那么后取者最终会面临 ( $m + 1$ ) 的局面，而先取者则必然获胜。总之，要保持给对手留下 ( $m + 1$ ) 的倍数，最后就一定能获胜。</p>\n<h3 id=\"Code-8\"><a href=\"#Code-8\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; a[i];</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"comment\">// sort(a.begin() + 1, a.end()); // 题目已经保证a有序，可以不写这句</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> s1 = <span class=\"number\">0</span>, s2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> f = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n; i; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!f) s1 += a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> s2 += a[i];</span><br><span class=\"line\">\t\tf ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s1 &gt; s2) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Alice&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Bob&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(t):</span><br><span class=\"line\">    n=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">    a=<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\">    <span class=\"comment\">#player=[&quot;Alice&quot;,&quot;Bob&quot;]</span></span><br><span class=\"line\">    player=[<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">    count=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> a!=[]:</span><br><span class=\"line\">        player[count%<span class=\"number\">2</span>]+=a.pop(-<span class=\"number\">1</span>)</span><br><span class=\"line\">        count+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> player[<span class=\"number\">0</span>]&gt;player[<span class=\"number\">1</span>]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Alice&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Bob&quot;</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"A-小红的签到题\"><a href=\"#A-小红的签到题\" class=\"headerlink\" title=\"A.小红的签到题\"></a>A.<a href=\"https://ac.nowcoder.com/acm/contest/94289/A\">小红的签到题</a></h2><h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>题目描述了一个情景，其中 ( a ) 是题目的总数，( b ) 是参赛人数，而 ( c ) 是所有人通过题目的总数。要找出最多有多少人“ak”，即通过了所有题目。</p>\n<p>在这种情况下，如果每个人至少通过了一道题，那么最多可以通过 ( a * b ) 道题。但题目只告诉我们总共通过了 ( c ) 道题。所以，要找出最多有多少人通过了所有题目，我们可以将 ( c ) 除以 ( a )，因为每个人要“ak”就需要通过 ( a ) 道题。</p>\n<p>为什么不需要计算余数呢？因为题目问的是最多有多少人“ak”，这意味着我们是在寻找一个整数解，即最多有多少完整地通过了所有题目的人。如果 ( c ) 不能被 ( a ) 整除，那么就意味着不可能有更多的人完全通过所有题目，因为余数代表的是不足以构成一个完整“ak”的人数。</p>\n<p>例如，如果 ( c &#x3D; 123 ) 且 ( a &#x3D; 6 )，那么 ( 123 &#x2F; 6 &#x3D; 20 ) 余 3。这表示最多有 20 个人可以完全通过所有题目，因为剩下的 3 道题不足以让更多的人完成“ak”。</p>\n<p>因此，直接用 ( c ) 除以 ( a ) 得到的整数部分就是答案。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">\tcin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">\tcout&lt;&lt;c/a&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a,b,c=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(c/a))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"B-判断闰年\"><a href=\"#B-判断闰年\" class=\"headerlink\" title=\"B.判断闰年\"></a>B.<a href=\"https://ac.nowcoder.com/acm/contest/94289/B\">判断闰年</a></h2><h3 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>公历闰年的简单计算方法（符合以下条件之一的年份即为闰年）：</p>\n<p>1.能被4整除而不能被100整除</p>\n<p>2.能被400整除</p>\n<h3 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((n%<span class=\"number\">4</span>==<span class=\"number\">0</span> &amp;&amp; n%<span class=\"number\">100</span>!=<span class=\"number\">0</span>) || (n%<span class=\"number\">400</span>==<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;yes&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;no&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span>(((n%<span class=\"number\">4</span>==<span class=\"number\">0</span>) <span class=\"keyword\">and</span> (n%<span class=\"number\">100</span>!=<span class=\"number\">0</span>)) <span class=\"keyword\">or</span> (n%<span class=\"number\">400</span>==<span class=\"number\">0</span>)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;yes&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-NOIP2010-数字统计\"><a href=\"#C-NOIP2010-数字统计\" class=\"headerlink\" title=\"C.[NOIP2010]数字统计\"></a>C.[<a href=\"https://ac.nowcoder.com/acm/contest/94289/C\">NOIP2010]数字统计</a></h2><h2 id=\"解析-2\"><a href=\"#解析-2\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>见代码</p>\n<h3 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> L, R;</span><br><span class=\"line\">\tcin &gt;&gt; L &gt;&gt; R;</span><br><span class=\"line\">\t<span class=\"type\">int</span> countTwos = <span class=\"number\">0</span>;  <span class=\"comment\">// 重命名变量以避免冲突</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class=\"line\">\t\tstring num_str = <span class=\"built_in\">to_string</span>(i);</span><br><span class=\"line\">\t\tcountTwos += <span class=\"built_in\">count</span>(num_str.<span class=\"built_in\">begin</span>(), num_str.<span class=\"built_in\">end</span>(), <span class=\"string\">&#x27;2&#x27;</span>);  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; countTwos &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L,R=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">count=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(L,R+<span class=\"number\">1</span>):</span><br><span class=\"line\">    count+=<span class=\"built_in\">str</span>(i).count(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"D-NOIP2017-图书管理员\"><a href=\"#D-NOIP2017-图书管理员\" class=\"headerlink\" title=\"D.[ NOIP2017]图书管理员\"></a>D.[ <a href=\"https://ac.nowcoder.com/acm/contest/94289/D\">NOIP2017]图书管理员</a></h2><h3 id=\"解析-3\"><a href=\"#解析-3\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>见代码</p>\n<h3 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; library, <span class=\"type\">const</span> pair&lt;<span class=\"type\">int</span>, string&gt;&amp; tupleX)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : library) &#123;</span><br><span class=\"line\">        string num_str = <span class=\"built_in\">to_string</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num_str.<span class=\"built_in\">length</span>() &gt;= tupleX.second.<span class=\"built_in\">length</span>()) &#123;</span><br><span class=\"line\">            string suffix = num_str.<span class=\"built_in\">substr</span>(num_str.<span class=\"built_in\">length</span>() - tupleX.first);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (suffix == tupleX.second) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, q;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">library</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; library[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, string&gt;&gt; <span class=\"built_in\">needed</span>(q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; s;</span><br><span class=\"line\">        needed[i] = <span class=\"built_in\">make_pair</span>(x, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(library.<span class=\"built_in\">begin</span>(), library.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; i : needed) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">find</span>(library, i) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n,q=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">library=[<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>()) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\"><span class=\"comment\">#和下面代码是一个意思:</span></span><br><span class=\"line\"><span class=\"comment\"># for _ in range(n):</span></span><br><span class=\"line\"><span class=\"comment\">#     library.append(int(input()))</span></span><br><span class=\"line\">needed=[<span class=\"built_in\">tuple</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(q)]</span><br><span class=\"line\"><span class=\"comment\">#和下面代码是一个意思:</span></span><br><span class=\"line\"><span class=\"comment\"># for _ in range(q):</span></span><br><span class=\"line\"><span class=\"comment\">#     needed.append(tuple(map(int,input().split())))</span></span><br><span class=\"line\"><span class=\"comment\">#test:</span></span><br><span class=\"line\"><span class=\"comment\"># print(library)</span></span><br><span class=\"line\"><span class=\"comment\"># print(needed)</span></span><br><span class=\"line\">library.sort()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">tupleX</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> library:</span><br><span class=\"line\">        a=-tupleX[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">str</span>(i)[a:]==<span class=\"built_in\">str</span>(tupleX[<span class=\"number\">1</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> needed:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(find(i))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"E-最大公约数-lcm\"><a href=\"#E-最大公约数-lcm\" class=\"headerlink\" title=\"E.最大公约数(lcm)\"></a>E.<a href=\"https://ac.nowcoder.com/acm/contest/94289/E\">最大公约数(lcm)</a></h2><h3 id=\"解析-4\"><a href=\"#解析-4\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>辗转相除法求最大公因数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a % b==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">gcd</span>(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> x, y; </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">gcd</span>(x, y);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">m,n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">while</span> m%n != <span class=\"number\">0</span>:</span><br><span class=\"line\">        oldm = m</span><br><span class=\"line\">        oldn = n</span><br><span class=\"line\"></span><br><span class=\"line\">        m = oldn</span><br><span class=\"line\">        n = oldm%oldn</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n</span><br></pre></td></tr></table></figure>\n\n<p><strong>最小公倍数（LCM）等于两个数的乘积除以它们的最大公因数（GCD）</strong></p>\n<h3 id=\"Code-4\"><a href=\"#Code-4\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> a,b;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"built_in\">lcm</span>(a,b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\">a,b=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.lcm(a,b))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"F-简单的整除\"><a href=\"#F-简单的整除\" class=\"headerlink\" title=\"F. 简单的整除\"></a>F.<a href=\"https://ac.nowcoder.com/acm/contest/94289/F\"> 简单的整除</a></h2><h3 id=\"解析-5\"><a href=\"#解析-5\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>见代码</p>\n<h3 id=\"Code-5\"><a href=\"#Code-5\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\tcin &gt;&gt; x;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; li = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : li) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x % <span class=\"number\">2</span> != <span class=\"number\">0</span> &amp;&amp; x % <span class=\"number\">3</span> != <span class=\"number\">0</span> &amp;&amp; x % <span class=\"number\">5</span> != <span class=\"number\">0</span> &amp;&amp; x % <span class=\"number\">7</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">li=[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x%i==<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;YES&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;NO&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"I-悬崖\"><a href=\"#I-悬崖\" class=\"headerlink\" title=\"I.悬崖\"></a>I.<a href=\"https://ac.nowcoder.com/acm/contest/94289/I\">悬崖</a></h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>小沙被困在两个巨大的墙壁之中快要被压死了，但是两个墙壁中间就是万丈悬崖，小沙想要多活一会，他脚底下有一个非常强大的弹跳鞋，每一次跳跃可以使他向着对面的墙壁飞行x米，但是他必须要踩上墙壁才能进行下一次跳跃，现已知两个墙壁中间间隔n米，并且每次跳跃两个墙壁之间的距离会减少1米，也就是说小沙在n秒后就会被压死，如果不考虑跳跃期间墙壁的移动，请问小沙最多能跳(飞)多少米。</p>\n<p><strong>两面墙壁都没有什么物品可以让小沙能够抓住从而挂在墙壁上，所以小沙要保证一直的跳跃才能不摔下悬崖</strong></p>\n<p>说明：小沙第一次跳跃两米，到对面墙壁，然后两个墙壁的距离变成1米，小沙继续跳到对面墙壁（此时虽然两个墙壁之间只有1米，但是小沙还是可以跳跃两米）例如：</p>\n<p><img src=\"https://uploadfiles.nowcoder.com/images/20220303/371724_1646315836289/9976BCCD254C760651A666CBC1845546\" alt=\"img\"></p>\n<p>可以看到虽然墙壁之间的距离只有一米，但是小沙还是可以跳两米远</p>\n<h3 id=\"Code-6\"><a href=\"#Code-6\" class=\"headerlink\" title=\"Code\"></a>Code</h3><h4 id=\"牛客513205243号-提交的代码\"><a href=\"#牛客513205243号-提交的代码\" class=\"headerlink\" title=\"牛客513205243号 提交的代码\"></a><a href=\"https://ac.nowcoder.com/acm/contest/profile/513205243\">牛客513205243号</a> 提交的代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> x, n;</span><br><span class=\"line\">\tcin &gt;&gt; x &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&gt;=n)</span><br><span class=\"line\">\t\tcout &lt;&lt; n * x;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\tcout &lt;&lt; x ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"砍个价沈-提交的代码\"><a href=\"#砍个价沈-提交的代码\" class=\"headerlink\" title=\"砍个价沈 提交的代码\"></a><a href=\"https://ac.nowcoder.com/acm/contest/profile/602481815\">砍个价沈</a> 提交的代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x,n=<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\"><span class=\"keyword\">if</span> x&gt;=n:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(x*n))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(x))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"J-猜拳游戏\"><a href=\"#J-猜拳游戏\" class=\"headerlink\" title=\"J. 猜拳游戏\"></a>J.<a href=\"https://ac.nowcoder.com/acm/contest/94289/J\"> 猜拳游戏</a></h3><h3 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>你正在与<em>长途</em>玩石头剪刀布的猜拳游戏。</p>\n<p>请回忆石头剪刀布的游戏规则：两个人同时伸出手，分别出示石头（用 shitou 表示）、剪刀（用 jiandao 表示）或布（用 bu 表示）的手势。石头胜剪刀，剪刀胜布，布胜石头。如果两个人出示的手势相同，则是平局，需要重新进行游戏。</p>\n<p>在开始游戏之前，<em>长途</em>会告诉你他要出石头、剪刀还是布。</p>\n<p>然而实际上，<em>长途</em>是在欺骗你。他认为你会相信他的话，并且认为你一定会根据他说的话选择能战胜他的手势（例如，他说他会出石头，他便认为你会出布）。</p>\n<p>所以最终，<em>长途</em>不会按照他告诉你的手势出拳，而是选择自己所认为一定能战胜你的手势。</p>\n<p>现在你已经看透了他的小心思。请问，在知道他告诉你他要出什么手势的情况下，你应该出什么手势才能取胜？</p>\n<h3 id=\"Code-7\"><a href=\"#Code-7\" class=\"headerlink\" title=\"Code\"></a>Code</h3><h4 id=\"牛客513205243号-提交的代码-1\"><a href=\"#牛客513205243号-提交的代码-1\" class=\"headerlink\" title=\"牛客513205243号 提交的代码\"></a><a href=\"https://ac.nowcoder.com/acm/contest/profile/513205243\">牛客513205243号</a> 提交的代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> n[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"砍个价沈-提交的代码-1\"><a href=\"#砍个价沈-提交的代码-1\" class=\"headerlink\" title=\"砍个价沈 提交的代码\"></a><a href=\"https://ac.nowcoder.com/acm/contest/profile/602481815\">砍个价沈</a> 提交的代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i=<span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span> i==<span class=\"string\">&quot;shitou&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;shitou&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> i==<span class=\"string\">&quot;jiandao&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;jiandao&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;bu&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">input</span>())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"G-小苯的石子游戏\"><a href=\"#G-小苯的石子游戏\" class=\"headerlink\" title=\"G.小苯的石子游戏\"></a>G.<a href=\"https://ac.nowcoder.com/acm/contest/94289/G\">小苯的石子游戏</a></h2><h3 id=\"解析-6\"><a href=\"#解析-6\" class=\"headerlink\" title=\"解析\"></a>解析</h3><h4 id=\"博弈的定义：\"><a href=\"#博弈的定义：\" class=\"headerlink\" title=\"博弈的定义：\"></a>博弈的定义：</h4><p>博弈的基本要素包括参与人（players）、行动（actions）、信息（information）、策略（strategies）、收益（payoffs）和均衡（equilibria）。</p>\n<h4 id=\"标准表达式（normal-form）：\"><a href=\"#标准表达式（normal-form）：\" class=\"headerlink\" title=\"标准表达式（normal form）：\"></a>标准表达式（normal form）：</h4><p>设在有 ( $n$ ) 个参与者的博弈中，令 ( $S_i$ ) 表示参与者 ( $i$ ) 可选择的战略集合（战略空间），其中任意一个特定的战略用 ( $s_i^*$ ) 表示（$s_i^* \\in S_i $）。当每个参与者都选定一个策略后，形成了博弈的一个战略组合 ( (s_1, s_2, \\ldots, s_n) )。令 ( $u_i$ ) 表示第 ( $i$ ) 个参与者选择对应策略后的收益函数。由此可定义博弈的标准表达式：( $G &#x3D; {S_1, \\ldots, S_n, u_1, \\ldots, u_n}$ )。</p>\n<h4 id=\"收益矩阵：\"><a href=\"#收益矩阵：\" class=\"headerlink\" title=\"收益矩阵：\"></a>收益矩阵：</h4><p>两人博弈的标准表达式通常可以使用收益矩阵来表示。例如，经典的囚徒困境问题。两个犯罪嫌疑人被逮捕并被分别隔离审问，他们不同的行动将带来不同的后果。如果两人都不坦白（沉默），将被判入狱1个月；如果双方都坦白（招认），两人都将判处6个月；如果一人招认而另一人拒不坦白，则招认一方将马上释放，而不坦白的另一人将判处9个月。两人博弈的收益矩阵可表示为如下形式，其中每一单元格有两个数字，分别表示囚徒1和囚徒2的收益：<br><img src=\"https://i-blog.csdnimg.cn/blog_migrate/9187d558af8a7ee6b9cb70a47de3f076.png#pic_center\" alt=\"囚徒困境\"></p>\n<h4 id=\"策略：\"><a href=\"#策略：\" class=\"headerlink\" title=\"策略：\"></a>策略：</h4><p>参与人关于其行动的完备集合，即考虑每一种可预见情况下选择的行动，即使那种情况出现不一定会出现。例如，如果参与人在1989年自杀，他的策略里也应当包括如果他在1990年还活着应该采取的对应行动。<br>策略和行动是有区别的，而在一些简单的博弈中，两者的表现可能是一致的，如上述的囚徒困境中博弈双方的策略和行动可选集都是 (${沉默, 招认}$)。</p>\n<h4 id=\"均衡：\"><a href=\"#均衡：\" class=\"headerlink\" title=\"均衡：\"></a>均衡：</h4><p>由博弈中的 ( n ) 个参与人选取的最佳策略所组成的一个策略组合 ( $s^* &#x3D; (s_1^*, \\ldots, s_n^*)$ )。</p>\n<h4 id=\"巴什博弈（Bash-Game）：\"><a href=\"#巴什博弈（Bash-Game）：\" class=\"headerlink\" title=\"巴什博弈（Bash Game）：\"></a>巴什博弈（Bash Game）：</h4><p>有$n$ 个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取 $m$ 个（$m &lt; n$ ）。最后取光者得胜。<br>分析：<br>显然，如果 ( $n &#x3D; m + 1$ )，那么由于一次最多只能取 ( $m$ ) 个物品，所以无论先取者拿走多少个，后取者都能够一次拿走剩余的物品，故后者必然取胜。根据这样的规律，我们发现了如何取胜的法则。<br>如果 ( $n &#x3D; (m + 1)r + s$ ) r 为任意自然数，( $0 \\leq s \\leq m$ )，那么先取者首先拿走 ( $s$ ) 个物品，接下来若后取者拿走 ( $k$ )（( $1 \\leq k \\leq m$ )）个，那么先取者再拿走 ( $m + 1 - k$ ) 个，结果剩下 ( $(m + 1) \\times (r - 1)$ ) 个，以后都保持这样的取法，那么后取者最终会面临 ( $m + 1$ ) 的局面，而先取者则必然获胜。总之，要保持给对手留下 ( $m + 1$ ) 的倍数，最后就一定能获胜。</p>\n<h3 id=\"Code-8\"><a href=\"#Code-8\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; a[i];</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"comment\">// sort(a.begin() + 1, a.end()); // 题目已经保证a有序，可以不写这句</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> s1 = <span class=\"number\">0</span>, s2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> f = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n; i; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!f) s1 += a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> s2 += a[i];</span><br><span class=\"line\">\t\tf ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s1 &gt; s2) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Alice&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Bob&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(t):</span><br><span class=\"line\">    n=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">    a=<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\">    <span class=\"comment\">#player=[&quot;Alice&quot;,&quot;Bob&quot;]</span></span><br><span class=\"line\">    player=[<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">    count=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> a!=[]:</span><br><span class=\"line\">        player[count%<span class=\"number\">2</span>]+=a.pop(-<span class=\"number\">1</span>)</span><br><span class=\"line\">        count+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> player[<span class=\"number\">0</span>]&gt;player[<span class=\"number\">1</span>]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Alice&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Bob&quot;</span>)</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}